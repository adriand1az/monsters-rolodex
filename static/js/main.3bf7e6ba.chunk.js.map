{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAML,EAAMG,QAAQG,KAApB,OACA,4BAAIN,EAAMG,QAAQI,aCCbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CCG,G,wDA5Cb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAS,GACTS,YAAc,IALL,E,gEASO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,+BAGjC,IAAD,SAE4BE,KAAKR,MAA/BR,EAFF,EAEEA,SAAUS,EAFZ,EAEYA,YAEZQ,EAAmBjB,EAASkB,QACjC,SAAAxB,GAAO,OAAIA,EAAQG,KACjBsB,cACAC,SAASX,EAAYU,kBAExB,OAEE,cADA,CACA,OAAK3B,UAAU,MAAf,UAEA,kDAEA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAGxD,cAAC,EAAD,CAAUvB,SAAUiB,EAApB,sB,GApCYO,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3bf7e6ba.chunk.js","sourcesContent":["import React from 'react';\nimport '../card/card.styles.css'\nexport const Card = props =>\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        <h2> {props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n    </div>","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.syles.css'\n\n\nexport const CardList = (props) => (\n    <div className='card-list'>      \n        {props.monsters.map(monster =>(\n            <Card key={monster.id} monster={monster}/>\n    ))}\n      </div>\n);","import React from 'react';\nimport '../search-box/search-box.styles.css'\n\n// Div name .search\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n    className='search' \n    type=\"search\" \n    placeholder={placeholder} \n    onChange={handleChange}\n          />\n)","import React, {Component} from 'react'\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n// State\n    this.state = {\n      monsters:[] ,\n      searchField : ''\n    }\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  render(){\n    // Destructuring array so we can use the monsters and search field without mutating our actual list\n    const { monsters, searchField } = this.state;\n    // Filters our monsters and checks if the any of the letters in the search box are in the monsters name\n    const filteredMonsters = monsters.filter\n    (monster => monster.name\n      .toLowerCase()\n      .includes(searchField.toLowerCase()))\n\n    return(\n      // Class name app is What is going to be sent to the master html file Also known as the public index.html\n      <div className=\"App\">\n\n      <h1>Monsters Rolodex</h1>\n\n      <SearchBox \n      placeholder='Search Monsters'\n      handleChange={e => this.setState({searchField: e.target.value})}\n      />\n\n      <CardList monsters={filteredMonsters}> </CardList> \n\n    </div>\n      \n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}